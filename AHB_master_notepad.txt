module AHB_master(
  input hclk,
  input hresetn,
  output hreadyout,
  input [31:0] hrdata,
  output reg [31:0] haddr,
  output reg [31:0] hwdata,
  output reg hwrite,
  output reg hreadyin,
  output reg [2:0] hburst,
  output reg [2:0] hsize,
  output reg [1:0] htrans
);

  integer i;

  task single_write();
    begin
      @(posedge hclk);
      #1;
      begin
        hwrite = 1;
        htrans = 2'b10;
        hsize = 0;
        hburst = 0;
        hreadyin = 1;
        haddr = 32'h8000_0000;
      end

      @(posedge hclk);
      #1;
      begin
        hwdata = 32'h24;
        htrans = 2'b00;
      end
    end
  endtask

  task single_read();
    begin
      @(posedge hclk);
      #1;
      begin
        hwrite = 0;
        htrans = 2'b10;
        hsize = 0;
        hburst = 0;
        hreadyin = 1;
        haddr = 32'h8000_0000;
      end

      @(posedge hclk);
      #1;
      begin
        htrans = 2'b00;
      end
    end
  endtask

  task burst_4_incr_write();
    begin
      @(posedge hclk);
      #1;
      begin
        hwrite = 1;
        htrans = 2'b10;
        hsize = 0;
        hburst = 0;
        hreadyin = 1;
        haddr = 32'h8000_0000;
      end

      @(posedge hclk);
      #1;
      begin
        hwdata = ($random) % 256;
        haddr = haddr + 1;
        htrans = 2'b11;
      end

      for (i = 0; i < 2; i = i + 1) begin
        @(posedge hclk);
        #1;
        begin
          hwdata = ($random) % 256;
          haddr = haddr + 1;
          htrans = 2'b11;
        end
        @(posedge hclk);
      end

      @(posedge hclk);
      #1;
      begin
        hwdata = ($random) % 256;
        htrans = 2'b00;
      end
    end
  endtask

  task burst_4_wrap_write();
    begin
      @(posedge hclk);
      #1;
      begin
        hwrite = 1;
        htrans = 2'b10;
        hsize = 0;
        hburst = 0;
        hreadyin = 1;
        haddr = 32'h8000_0000;
      end

      @(posedge hclk);
      #1;
      begin
        hwdata = ($random) % 256;
        haddr = {haddr[31:0], haddr[1:0] + 1'b1};
        htrans = 2'b11;
      end

      for (i = 0; i < 2; i = i + 1) begin
        @(posedge hclk);
        #1;
        begin
          hwdata = ($random) % 256;
          haddr = {haddr[31:0], haddr[1:0] + 1'b1};
          htrans = 2'b11;
        end
        @(posedge hclk);
      end

      @(posedge hclk);
      #1;
      begin
        hwdata = ($random) % 256;
        htrans = 2'b00;
      end
    end
  endtask

  task burst_4_incr_read();
    begin
      @(posedge hclk);
      #1;
      begin
        hwrite = 1;
        htrans = 2'b10;
        hsize = 0;
        hburst = 0;
        hreadyin = 1;
        haddr = 32'h8000_0000;
      end

      for (i = 0; i < 2; i = i + 1) begin
        @(posedge hclk);
        #1;
        begin
          haddr = haddr + 1;
          htrans = 2'b11;
        end
        @(posedge hclk);
      end

      @(posedge hclk);
      #1;
      begin
        htrans = 2'b00;
      end
    end
  endtask

  task burst_4_wrap_read();
    begin
      @(posedge hclk);
      #1;
      begin
        hwrite = 1;
        htrans = 2'b10;
        hsize = 0;
        hburst = 0;
        hreadyin = 1;
        haddr = 32'h8000_0000;
      end

      for (i = 0; i < 2; i = i + 1) begin
        @(posedge hclk);
        #1;
        begin
          haddr = {haddr[31:0], haddr[1:0] + 1'b1};
          htrans = 2'b11;
        end
        @(posedge hclk);
      end

      @(posedge hclk);
      #1;
      begin
        haddr = {haddr[31:0], haddr[1:0] + 1'b1};
        htrans = 2'b00;
      end
    end
  endtask

endmodule

